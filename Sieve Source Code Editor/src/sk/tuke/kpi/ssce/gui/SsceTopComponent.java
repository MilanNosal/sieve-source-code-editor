/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package sk.tuke.kpi.ssce.gui;

import java.awt.BorderLayout;
import java.awt.Component;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import javax.swing.JTabbedPane;
import javax.swing.SwingUtilities;
import org.netbeans.api.editor.EditorRegistry;
import org.netbeans.api.settings.ConvertAsProperties;
import org.netbeans.editor.BaseDocument;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.cookies.EditorCookie;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import sk.tuke.kpi.ssce.gui.Bundle;
import sk.tuke.kpi.ssce.core.Constants;
import sk.tuke.kpi.ssce.core.SSCEditorCore;

/**
 * Top component which displays something.
 */
//SsceIntent:Komponent grafickeho rozhrania;
//@ConvertAsProperties(dtd = "-//sk.tuke.kpi.nosal.matej.ssce.gui//Ssce//EN", autostore = false)
@TopComponent.Description(preferredID = "SsceTopComponent",
iconBase = "sk/tuke/kpi/nosal/matej/ssce/gui/ssce.png",
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "navigator", openAtStartup = false)
@ActionID(category = "Window", id = "sk.tuke.kpi.nosal.matej.ssce.gui.SsceTopComponent")
@ActionReference(path = "Menu/Window" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_SsceAction",
preferredID = "SsceTopComponent")
@Messages({
    "CTL_SsceAction=Ssce",
    "CTL_SsceTopComponent=Ssce",
    "HINT_SsceTopComponent=This is a Sieve Source Code Editor window"
})
public final class SsceTopComponent extends TopComponent implements PropertyChangeListener {

    private final NoViewAvailablePanel emptyPanel = new NoViewAvailablePanel();
    private final JTabbedPane ssceTabbedPanel;
    private final JTabbedPane javaTabbedPanel;
    //SsceIntent:Komponent grafickeho rozhrania;
    private final SsceIntentFilterPanel ssceIntentFilterPanel = new SsceIntentFilterPanel();
    //SsceIntent:Komponent grafickeho rozhrania;
    private final SsceIntentManagerPanel ssceIntentManagerPanel = new SsceIntentManagerPanel(SsceIntentManagerPanel.Mode.SIEVE_DOCUMENT);
    //SsceIntent:Komponent grafickeho rozhrania;
    private final SsceIntentManagerPanel javaIntentManagerPanel = new SsceIntentManagerPanel(SsceIntentManagerPanel.Mode.JAVA_DOCUMENT);
    private BaseDocument document = null;

    /**
     * Vytvori SSCE top komponent.
     */
    //SsceIntent:Komponent grafickeho rozhrania;
    public SsceTopComponent() {
        initComponents();
        setName(Bundle.CTL_SsceTopComponent());
        setToolTipText(Bundle.HINT_SsceTopComponent());
        this.add(emptyPanel, BorderLayout.CENTER);


        javaTabbedPanel = new JTabbedPane();
        javaTabbedPanel.addTab(org.openide.util.NbBundle.getMessage(SsceTopComponent.class, "SsceTopComponent.ssceIntentManagerPanel.TabConstraints.tabTitle"), javaIntentManagerPanel);

        ssceTabbedPanel = new JTabbedPane();
        ssceTabbedPanel.addTab(org.openide.util.NbBundle.getMessage(SsceTopComponent.class, "SsceTopComponent.ssceIntentFilterPanel.TabConstraints.tabTitle"), ssceIntentFilterPanel);

        ssceTabbedPanel.addTab(org.openide.util.NbBundle.getMessage(SsceTopComponent.class, "SsceTopComponent.ssceIntentManagerPanel.TabConstraints.tabTitle"), ssceIntentManagerPanel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        TopComponent.getRegistry().addPropertyChangeListener(this);
        EditorRegistry.addPropertyChangeListener(this);
    }

    @Override
    public void componentClosed() {
        TopComponent.getRegistry().removePropertyChangeListener(this);
        EditorRegistry.removePropertyChangeListener(this);
    }


//    void writeProperties(java.util.Properties p) {
//        // better to version settings since initial version as advocated at
//        // http://wiki.apidesign.org/wiki/PropertyFiles
//        p.setProperty("version", "1.0");
//        // TODO store your settings
//    }
//
//    void readProperties(java.util.Properties p) {
//        String version = p.getProperty("version");
//        // TODO read your settings according to their version
//    }

    /**
     * Metoda spracovava zmeny fokusu v netbeans IDE. Aktualizuje GUI SSCE Editora.
     * @param evt
     */
    //SsceIntent:Aktualizacia grafickeho rozhrania;
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        TopComponent topComponent = null;

        if (EditorRegistry.FOCUS_GAINED_PROPERTY.equals(evt.getPropertyName())
                || EditorRegistry.FOCUS_LOST_PROPERTY.equals(evt.getPropertyName())
                || TopComponent.Registry.PROP_ACTIVATED.equals(evt.getPropertyName())) {
            topComponent = TopComponent.getRegistry().getActivated();
            if (EditorRegistry.componentList() == null || EditorRegistry.componentList().isEmpty()) {
                removeDocument();
            } else {
                if (WindowManager.getDefault().isEditorTopComponent(topComponent)) {
                    EditorCookie editorCookie = topComponent.getLookup().lookup(EditorCookie.class);
                    if (editorCookie != null) {

                        BaseDocument baseDocument = null;
                        try {
                            baseDocument = (BaseDocument) editorCookie.openDocument();
                            if (baseDocument.getProperty(Constants.SSCE_CORE_OBJECT_PROP) != null) {
                                if ("text/x-sieve-java".equals(baseDocument.getProperty(BaseDocument.MIME_TYPE_PROP))) {
                                    setNewSieveDocument(baseDocument);
                                } else if ("text/x-java".equals(baseDocument.getProperty(BaseDocument.MIME_TYPE_PROP))) {
                                    setNewJavaDocument(baseDocument);
                                } else {
                                    removeDocument();
                                }
                            } else {
                                removeDocument();
                            }
                        } catch (IOException ex) {
                            Exceptions.printStackTrace(ex);
                            removeDocument();
                        }

                    } else {
                        removeDocument();
                    }
                }
            }

        }
    }

    //SsceIntent:Aktualizacia grafickeho rozhrania;
    private void setNewSieveDocument(BaseDocument document) {
        if (this.document != null && this.document.equals(document)) {
            return;
        }
        this.document = document;
        this.javaIntentManagerPanel.removeSSCEditorCore();
        SSCEditorCore core = (SSCEditorCore) document.getProperty(Constants.SSCE_CORE_OBJECT_PROP);
        this.ssceIntentFilterPanel.setSSCEditorCore(core);
        this.ssceIntentManagerPanel.setSSCEditorCore(core, this.document);

        for (Component comp : getComponents()) {
            if (comp.equals(ssceTabbedPanel)) {
                return;
            }
        }

        this.removeAll();
        this.add(ssceTabbedPanel, BorderLayout.CENTER);
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                repaint();
            }
        });
    }

    //SsceIntent:Aktualizacia grafickeho rozhrania;
    private void setNewJavaDocument(BaseDocument document) {


        if (this.document != null && this.document.equals(document)) {
            return;
        }
        this.document = document;
        
        
        this.ssceIntentFilterPanel.removeSSCEditorCore();
        this.ssceIntentManagerPanel.removeSSCEditorCore();

        this.javaIntentManagerPanel.setSSCEditorCore((SSCEditorCore) document.getProperty(Constants.SSCE_CORE_OBJECT_PROP), this.document);

        for (Component comp : getComponents()) {
            if (comp.equals(javaTabbedPanel)) {
                return;
            }
        }

        this.removeAll();
        this.add(javaTabbedPanel, BorderLayout.CENTER);
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                repaint();
            }
        });
    }

    //SsceIntent:Aktualizacia grafickeho rozhrania;
    private void removeDocument() {


        if (this.document == null) {
            return;
        }
        this.document = null;
        this.ssceIntentFilterPanel.removeSSCEditorCore();
        this.ssceIntentManagerPanel.removeSSCEditorCore();
        this.javaIntentManagerPanel.removeSSCEditorCore();

        this.removeAll();
        this.add(emptyPanel, BorderLayout.CENTER);
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                repaint();
            }
        });
    }
}
